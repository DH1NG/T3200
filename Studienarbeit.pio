; SET pin 0 should be mapped to your LED GPIO

;.program blink
;    pull block
;    out y, 32
;.wrap_target
;    mov x, y
;    set pins, 1   ; Turn LED on
;lp1:
;    jmp x-- lp1   ; Delay for (x + 1) cycles, x is a 32 bit number
;    mov x, y
;    set pins, 0   ; Turn LED off
;lp2:
;    jmp x-- lp2   ; Delay for the same number of cycles again
;.wrap             ; Blink forever!

.program burst
    set pindirs, 1   ; Set pin to output
    pull ; Werte vom FIFO in die "working registers"
    mov y, osr ; TX FIFO ist im Outpu-Shift-Register > in arbeitsregister y
    endlos:        
        mov x,y ; Laufende Variable x (Anzahl wie viele Bursts noch gemacht werden müssen)
        burst_Schleife:
            set pins, 1 [1]  ; Pin auf High und 1 Zyklus delay
            set pins, 0      ; Pin auf Low 
            jmp x-- burst_Schleife    ; dauert 1 Zyklus ;if(x!=0) then {x=x-1; jmp burst_Schleife}
            
            set x, 31 ; maximaler Wert 
        Delay: 
            nop [4] ; nichts tun für 1 + 4 Zyklen
            jmp x-- Delay ; 1 Zyklus + Schleife
            set x, 31
        Delay2: 
            nop [4]
            jmp x-- Delay2      
        jmp endlos 

% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void burst_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = burst_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin, 1);
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
}
%}
